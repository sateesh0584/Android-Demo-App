name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_DEFAULT_REGION: "ap-south-1" 

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x android-demo-app/gradlew
      - name: Build with Gradle
        working-directory: android-demo-app
        run: |
          ./gradlew build
          pwd  # Print current working directory after build
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: cd android-demo-app && ./gradlew build sonar --info 
      - name: Date and Time
        run: echo "::set-output name=current_date_time::$(date +"%d-%m-%Y-%H-%I-%M-%S")"
        id : date
      - name: Copy APK files to a directory
        run: |
         mkdir -p ${{ github.workspace }}/apk-files/debug ${{ github.workspace }}/apk-files/release
         cp android-demo-app/app/build/outputs/apk/dev/debug/app-dev-debug.apk ${{ github.workspace }}/apk-files/debug/app-debug-${{ steps.date.outputs.current_date_time }}.apk
         cp android-demo-app/app/build/outputs/apk/dev/release/app-dev-release-unsigned.apk ${{ github.workspace }}/apk-files/release/app-release-unsigned-${{ steps.date.outputs.current_date_time }}.apk

      - name: Upload apk-files Directory
        uses: actions/upload-artifact@v3
        with:
          name: apk-files-artifacts
          path: ${{ github.workspace }}/apk-files/
          if-no-files-found: ignore
    outputs:
        CURRENT_DATE_TIME: ${{ steps.date.outputs.current_date_time }}
  
  notification:
    name: Notification to Teams
    runs-on: ubuntu-latest
    steps:
      - name: Send notification to Teams
        uses: toko-bifrost/ms-teams-deploy-card@master
        if: always()
        with:
          github-token: ${{ secrets.CI_GITHUB_TOKEN }}
          webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if:
      contains(github.ref, 'refs/heads/qa') || contains(github.ref, 'refs/heads/main')
    steps:
      - name: Check out Git Repository
        uses: actions/checkout@v2

      - name: Download apk-files-artifacts
        uses: actions/download-artifact@v3
        with:
          name: apk-files-artifacts
          path: ${{ github.workspace }}/apk-files/

      - name: Display structure of downloaded files of Artifact 
        run: ls -R
        working-directory: ${{ github.workspace }}/apk-files/

      - name: Public IP of Github Hosted Runner
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Debugging Info
        run: |
          echo "GitHub Ref: ${{ github.ref }}"
          echo "Current Date Time: ${{ needs.build.outputs.CURRENT_DATE_TIME }}"
          echo "JFrog URL: ${{ secrets.JF_URL }}"
          echo "JFrog User: ${{ secrets.JF_USER }}"

      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.JFROG_SG_ID }} --protocol tcp --port 8082 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'ap-south-1'

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        with:
          version: latest
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Create folder for qa and master branch in apk-files
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/qa' ]]; then
            cd ${{ github.workspace }}/apk-files && mkdir -p qa && mv debug/ qa/ && mv release/ qa/
          elif [[ ${{ github.ref }} == 'refs/heads/master' ]]; then
            cd ${{ github.workspace }}/apk-files && mkdir -p master && mv debug/ master/ && mv release/ master/
          fi

      - name: Upload APK files to Jfrog
        run: |
         if [[ ${{ github.ref }} == 'refs/heads/qa' ]]; then
         jf rt u --url ${{ secrets.JF_URL }} --user ${{ secrets.JF_USER }} --password ${{ secrets.JF_PASSWORD }} apk-files/qa/debug/app-debug-${{ needs.build.outputs.CURRENT_DATE_TIME }}.apk test-Cloud/
         jf rt u --url ${{ secrets.JF_URL }} --user ${{ secrets.JF_USER }} --password ${{ secrets.JF_PASSWORD }} apk-files/qa/release/app-release-unsigned-${{ needs.build.outputs.CURRENT_DATE_TIME }}.apk test-Cloud/
         elif [[ ${{ github.ref }} == 'refs/heads/master' ]]; then
         jf rt u --url ${{ secrets.JF_URL }} --user ${{ secrets.JF_USER }} --password ${{ secrets.JF_PASSWORD }} apk-files/master/debug/app-debug-${{ needs.build.outputs.CURRENT_DATE_TIME }}.apk test-Cloud/
         jf rt u --url ${{ secrets.JF_URL }} --user ${{ secrets.JF_USER }} --password ${{ secrets.JF_PASSWORD }} apk-files/master/release/app-release-unsigned-${{ needs.build.outputs.CURRENT_DATE_TIME }}.apk test-Cloud/
         fi

      - name: Check Uploaded Artifacts in JFrog
        run: |
          echo "Listing contents of test-Cloud repository:"
          jfrog rt s test-Cloud
      
      - name: Remove Github Actions IP from security group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.JFROG_SG_ID }} --protocol tcp --port 8082 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
        if: always()
      
      - name: Notification to Teams
        uses: toko-bifrost/ms-teams-deploy-card@master #  or "./" if in a local set-up
        if: always()
        with:
          github-token: ${{ secrets.CI_GITHUB_TOKEN  }}
          webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
